# -*- coding: utf-8 -*-"""Demo of unicode support in text and labels."""from __future__ import unicode_literalsfrom math import piimport sysdef units_conversion( x, unit1, unit2 ): """ To Convert units  ------------------------------------------------------------------------- Created by Henning Ressing, PhD The University of British Columbia, Mechanical Engineering  Adapted and updated to use in alarconpy : Albenis Pérez Alarcón contact: apalarcon1991@gmail.com Last Update: May 4, 2019 Parameter ------------------ X: float value   unit1:str X units  units2:str desire units     y = units(x,'unit1','unit2')  - Converts x from physical unit1 to unit2  example: units(1,'in','mm') = 25.4 The following units are supported: Acceleration: m/s^2, cm/s^2, mm/s^2, ft/s^2, in/s^2, G Angle: rad, deg, rev Area: km^2, m^2, cm^2, mm^2, ym^2 (square-micrometer), sq-mile, sq-yd, sq-ft, sq-in, acres, ha, ar Area Moment of Inertia: m^4, cm^4, mm^4, ft^4, in^4 Density: t/m^3 (metric), kg/m^3, g/cm^3, g/mm^3, lbs/ft^3 lbs/in^3, lbs/galUS, lbs/galUK Energy, Work, Torque: GJ, MJ, kJ, J, mJ, Nm, Ncm, Nmm, kWh, Wh, Ws, lb-ft, lb-in, oz-in,Btu, Btu, cal, kcal, eV Force: MN, kN, N, dyne, lbf, kip Fuel Consumption: l/100km, miles/galUS Frequency, Angular Velocity: GHz, MHz, kHz, Hz, 1/s, 1/min, 1/h, rad/s, deg/s, rpm Length: km, m, dm, cm, mm, ym (micrometer), nm, mile, yard, ft, in, mill, Angstrom, light-year Mass: t (metric), tUS, tUK, kg, g, mg, yg (microgram), ng, lbs, oz Mass Moment of Inertia: kg*m^2, kg*cm^2, kg*mm^2, g*m^2, g*cm^2, g*mm^2, lb*ft^2, lb*in^2 Power: GW, MW, kW, W, mW, hp, Btu/h, Btu/s, kcal/h, J/h Pressure, Stress: GPa, MPa, kPa, hPa, Pa, bar, mbar, atm, dyne/cm^2, ksi, psi, mmHg, mmH2O Strain: m/m, mm/m, ym/m (micrometer/m), nm/m, #, o/oo, in/in, mill/in Stress Intensity Factor: MPa*m^1/2, MPa*mm^1/2, ksi*in^1/2, psi*in^1/2 Temperature: degK, degC, degF, degR Time: yr (365 days), mth (30 days), wk, day, hr, min, s, ms, ys (microsecond), ns Velocity: km/s, km/h, m/s, cm/s, mm/s, m/min, mm/min, mps, mph, ft/s, in/s, ft/min, in/min, Mach, knots Viscosity: Ns/m^2, poise, centipoise, lbfs/sq-ft Volume: km^3, m^3, cm^3, mm^3, ym^3, cu-mile, cu-ft, cu-in, l, cl, ml, galUS, galUK, pint (liquid US), quart (liquid US), fl-oz (liquid US) Metric Prefixes: Yotta, Zetta, Exa, Peta, Terra, Giga, Mega, Myria, kilo, hecto, 1 deci, centi, milli, micro, nano, pico, femto, atto, zepto, yocto  """ err = 0# Length if  unit1 == 'km':  x = x*1000    units_type="Length" elif unit1 == 'm':  x = x  units_type="Length" elif unit1 == 'dm':  x = x/10.  units_type="Length" elif unit1 == 'cm':  x = x/100.  units_type="Length" elif unit1 == 'mm':  x = x/1000.  units_type="Length" elif unit1 == 'ym':  x = x/1e6  units_type="Length" elif unit1 == 'nm':  x = x/1e9  units_type="Length" elif unit1 == 'mile':  x = x*1609.344  units_type="Length" elif unit1 == 'yard':  x = x*0.9144  units_type="Length" elif unit1 == 'ft':  x = x*0.3048   units_type="Length" elif unit1 == 'in':  x = x*0.0254  units_type="Length" elif unit1 == 'mill':  x = x*(25.4e-6)  units_type="Length" elif unit1 == 'Angstrom':  x = x/1e10  units_type="Length" elif unit1 == 'light-year':  x = x*9.46075309081898e15  units_type="Length"# Time elif unit1 == 'yr':  x = x*(60*60*24*365)   units_type="Time" elif unit1 == 'mth':  x = x*(60*60*24*30)  units_type="Time" elif unit1 == 'wk':  x = x*(60*60*24*7)  units_type="Time" elif unit1 == 'day':  x = x*(60*60*24)  units_type="Time" elif unit1 == 'hr':  x = x*(60*60)  units_type="Time" elif unit1 == 'min':  x = x*60  units_type="Time" elif unit1 == 's':  x = x  units_type="Time" elif unit1 == 'ms':  x = x/1000.  units_type="Time" elif unit1 == 'ys':  x = x/1e6  units_type="Time" elif unit1 == 'ns':  x = x/1e9  units_type="Time"# Mass elif unit1 == 't':  x = x*1000  units_type="Mass" elif unit1 == 'tUS':  x = x*907.18474  units_type="Mass" elif unit1 == 'tUK':  x = x*1016.0469088  units_type="Mass" elif unit1 == 'kg':  x = x  units_type="Mass" elif unit1 == 'g':  x = x/1000.  units_type="Mass" elif unit1 == 'mg':  x = x/1e6  units_type="Mass" elif unit1 == 'yg':  x = x/1e9  units_type="Mass" elif unit1 == 'ng':  x = x/1e12  units_type="Mass" elif unit1 == 'lbs':  x = x*0.4535924  units_type="Mass" elif unit1 == 'oz':  x = x*0.03110348  units_type="Mass"# Force elif unit1 == 'MN':  x = x*1e6    units_type="Force" elif unit1 == 'kN':  x = x*1000    units_type="Force" elif unit1 == 'N':  x = x  units_type="Force" elif unit1 == 'dyne':  x = x/1e5  units_type="Force" elif unit1 == 'lbf':  x = x*4.448222  units_type="Force" elif unit1 == 'kip':  x = x*4448.222  units_type="Force"# Pressure, Stress elif unit1 == 'GPa':  x = x*1e9  units_type="Pressure" elif unit1 == 'MPa':  x = x*1e6  units_type="Pressure" elif unit1 == 'N/mm^2':  x = x*1e6  units_type="Pressure" elif unit1 == 'kPa':  x = x*1000  units_type="Pressure" elif unit1 == 'hPa':  x = x*100  units_type="Pressure" elif unit1 == 'Pa':  x = x  units_type="Pressure" elif unit1 == 'bar':  x = x*1e5  units_type="Pressure" elif unit1 == 'mbar':  x = x*100  units_type="Pressure" elif unit1 == 'dyne/cm^2':  x = x/10.  units_type="Pressure" elif unit1 == 'atm':  x = x*1.01325e5  units_type="Pressure" elif unit1 == 'ksi':  x = x*6894757  units_type="Pressure" elif unit1 == 'psi':  x = x*6894.757  units_type="Pressure" elif unit1 == 'mmHg':  x = x*133.322  units_type="Pressure" elif unit1 == 'mmH2O':  x = x*9.80665  units_type="Pressure" # Temperature elif unit1 == 'degK':  x = x  units_type="Temperature" elif unit1 == 'degC':  x = x + 273.15  units_type="Temperature" elif unit1 == 'degF':  x = 5/9*(x-32) + 273.15  units_type="Temperature" elif unit1 == 'degR':  x = 5/9*(x-491.67) + 273.15  units_type="Temperature"# Work, Energy, Torque elif unit1 == 'GJ':  x = x*10^9  units_type="Energy" elif unit1 == 'MJ':  x = x*10^6  units_type="Energy" elif unit1 == 'kJ':  x = x*1000  units_type="Energy" elif unit1 == 'J':  x = x  units_type="Energy" elif unit1 == 'mJ':  x = x/1000.  units_type="Energy" elif unit1 == 'Nm':  x = x  units_type="Energy" elif unit1 == 'Ncm':  x = x/100.  units_type="Energy" elif unit1 == 'Nmm':  x = x/1000.  units_type="Energy" elif unit1 == 'lb-ft':  x = x*1.355818  units_type="Energy" elif unit1 == 'lb-in':  x = x*0.112984833  units_type="Energy" elif unit1 == 'oz-in':  x = x*7.061552e-3  units_type="Energy" elif unit1 == 'Btu':  x = x*1055.056  units_type="Energy" elif unit1 == 'kWh':  x = x*3.6e6  units_type="Energy" elif unit1 == 'Wh':  x = x*3600  units_type="Energy" elif unit1 == 'Ws':  x = x  units_type="Energy" elif unit1 == 'cal':  x = x*4.1868  units_type="Energy" elif unit1 == 'kcal':  x = x*4186.8  units_type="Energy" elif unit1 == 'eV':  x = x*1.60218e-19  units_type="Energy"# Power elif unit1 == 'GW':  x = x*1e9  units_type="Power" elif unit1 == 'MW':  x = x*1e6  units_type="Power" elif unit1 == 'kW':  x = x*1e3  units_type="Power" elif unit1 == 'W':  x = x  units_type="Power" elif unit1 == 'mW':  x = x/1000.  units_type="Power" elif unit1 == 'hp':  x = x*745.6999  units_type="Power" elif unit1 == 'Btu/h':  x = x*0.2930711  units_type="Power" elif unit1 == 'Btu/s':  x = x*1055.056  units_type="Power" elif unit1 == 'kcal/h':  x = x*1.163  units_type="Power" elif unit1 == 'J/h':  x = x/3600.  units_type="Power"# Velocity elif unit1 == 'km/h':  x = x*(1000./3600.)  units_type="Velocity" elif unit1 == 'km/s':  x = x*1000  units_type="Velocity" elif unit1 == 'm/s':  x = x  units_type="Velocity" elif unit1 == 'cm/s':  x = x/100.  units_type="Velocity" elif unit1 == 'mm/s':  x = x/1000.  units_type="Velocity" elif unit1 == 'm/min':  x = x/60.  units_type="Velocity" elif unit1 == 'mm/min':  x = x/60000  units_type="Velocity" elif unit1 == 'mph':  x = x*(1609.344/3600.)  units_type="Velocity" elif unit1 == 'mps':  x = x*1609.344  units_type="Velocity" elif unit1 == 'ft/s':  x = x*0.3048  units_type="Velocity" elif unit1 == 'in/s':  x = x*0.0254  units_type="Velocity" elif unit1 == 'ft/min':  x = x*(0.3048/60)  units_type="Velocity" elif unit1 == 'in/min':  x = x*(0.0254/60)  units_type="Velocity" elif unit1 == 'Mach':  x = x*331.5  units_type="Velocity" elif unit1 == 'knots':  x = x*0.514444  units_type="Velocity"# Acceleration elif unit1 == 'm/s^2':  x = x  units_type="Aceleration" elif unit1 == 'cm/s^2':  x = x/100.  units_type="Aceleration" elif unit1 == 'mm/s^2':  x = x/1000.  units_type="Aceleration" elif unit1 == 'ft/s^2':  x = x*0.3048  units_type="Aceleration" elif unit1 == 'in/s^2':  x = x*0.0254  units_type="Aceleration" elif unit1 == 'G':  x = x*9.81  units_type="Aceleration"# Area elif unit1 == 'km^2':  x = x*1e6  units_type="Area" elif unit1 == 'm^2':  x = x  units_type="Area" elif unit1 == 'cm^2':  x = x/1e4  units_type="Area" elif unit1 == 'mm^2':  x = x/1e6  units_type="Area" elif unit1 == 'ym^2':  x = x/1e12  units_type="Area" elif unit1 == 'sq-mile':  x = x*1609.344^2  units_type="Area" elif unit1 == 'sq-yd':  x = x*0.83612736  units_type="Area" elif unit1 == 'sq-ft':  x = x*0.3048^2  units_type="Area" elif unit1 == 'sq-in':  x = x*0.0254^2  units_type="Area" elif unit1 == 'acres':  x = x*4046.8564224  units_type="Area" elif unit1 == 'ha':  x = x*1e4  units_type="Area" elif unit1 == 'ar':  x = x*100  units_type="Area"# Volume elif unit1 == 'km^3':  x = x*10^9  units_type="Volume" elif unit1 == 'm^3':  x = x  units_type="Volume" elif unit1 == 'cm^3':  x = x/10^6  units_type="Volume" elif unit1 == 'mm^3':  x = x/10^9  units_type="Volume" elif unit1 == 'ym^3':  x = x/10^18  units_type="Volume" elif unit1 == 'cu-mile':  x = x*1609.344^3  units_type="Volume" elif unit1 == 'cu-yd':  x = x*0.764554857984  units_type="Volume" elif unit1 == 'cu-ft':  x = x*0.3048^3  units_type="Volume" elif unit1 == 'cu-in':  x = x*0.0254^3  units_type="Volume" elif unit1 == 'l':  x = x/1000.  units_type="Volume" elif unit1 == 'cl':  x = x/1e6  units_type="Volume" elif unit1 == 'ml':  x = x/10^9  units_type="Volume" elif unit1 == 'galUS':  x = x*3.785412e-3  units_type="Volume" elif unit1 == 'galUK':  x = x*4.54609e-3   units_type="Volume" elif unit1 == 'pint':  x = x*4.73176473e-4  units_type="Volume" elif unit1 == 'quart':  x = x*9.46352946e-4  units_type="Volume" elif unit1 == 'fl-oz':  x = x*2.95735295625e-5  units_type="Volume"# Density elif unit1 == 't//m^3':  x = x*1000  units_type="Density" elif unit1 == 'kg/m^3':  x = x  units_type="Density" elif unit1 == 'g/cm^3':  x = x*1000  units_type="Density" elif unit1 == 'g/mm^3':  x = x*1e6  units_type="Density" elif unit1 == 'kg/l':  x = x*1000  units_type="Density" elif unit1 == 'lbs/ft^3':  x = x*(0.4535924/0.3048^3)  units_type="Density" elif unit1 == 'lbs/in^3':  x = x*(0.4535924/0.0254^3)  units_type="Density" elif unit1 == 'lbs/galUS':  x = x*119.826427  units_type="Density" elif unit1 == 'lbs/galUK':  x = x*99.776373  units_type="Density"# Mass Moment of Inertia elif unit1 == 'kg*m^2':  x = x  units_type="Momentum" elif unit1 == 'kg*cm^2':  x = x/1e4  units_type="Momentum" elif unit1 == 'kg*mm^2':  x = x/1e6  units_type="Momentum" elif unit1 == 'g*m^2':  x = x/1000.  units_type="Momentum" elif unit1 == 'g*cm^2':  x = x/1e7  units_type="Momentum" elif unit1 == 'g*mm^2':  x = x/1e9  units_type="Momentum" elif unit1 == 'lb*ft^2':  x = x*0.04214011  units_type="Momentum" elif unit1 == 'lb*in^2':  x = x*0.2926397e-3  units_type="Momentum"# Area Moment of Inertia elif unit1 == 'm^4':  x = x  units_type="Area_Momentum" elif unit1 == 'cm^4':  x = x/1e8  units_type="Area_Momentum" elif unit1 == 'mm^4':  x = x/1e12  units_type="Area_Momentum" elif unit1 == 'ft^4':  x = x/(0.3048^4)  units_type="Area_Momentum" elif unit1 == 'in^4':  x = x/(0.0254^4)  units_type="Area_Momentum"# Frequency / Angular Velocity elif unit1 == 'GHz':  x = x*1e9  units_type="Frecuency" elif unit1 == 'MHz':  x = x*1e6  units_type="Frecuency" elif unit1 == 'kHz':  x = x*1e3  units_type="Frecuency" elif unit1 == 'Hz':  x = x  units_type="Frecuency" elif unit1 == '1/min':  x = x/60.  units_type="Frecuency" elif unit1 == '1/h':  x = x/3600.  units_type="Frecuency" elif unit1 == 'rad/s':  x = x/(2*pi)  units_type="Frecuency" elif unit1 == 'deg/s':  x = x/360.  units_type="Frecuency" elif unit1 == 'rpm':  x = x/60.  units_type="Frecuency"# Angle elif unit1 == 'rad':  x = x  units_type="Angle" elif unit1 == 'deg':  x = x*(pi/180.)  units_type="Angle" elif unit1 == 'rev':  x = x*(2*pi)  units_type="Angle"# Stress Intensity Factor elif unit1 == 'MPa*m^1/2':  x = x  units_type="Stress_Intensity" elif unit1 == 'MPa*mm^1/2':  x = x/sqrt(1000)  units_type="Stress_Intensity" elif unit1 == 'ksi*in^1/2':  x = x*6.894757*sqrt(0.0254)  units_type="Stress_Intensity" elif unit1 == 'psi*in^1/2':  x = x*6894.757*sqrt(0.0254)  units_type="Stress_Intensity"# Fuel Consumption elif unit1 == 'l/100km':  x = x  units_type="Fuel" elif unit1 == 'miles/galUS':  x = 235.214596754951/x  units_type="Fuel"# Viscosity elif unit1 == 'Ns/m^2':  x = x  units_type="Viscosity" elif unit1 == 'poise':  x = x/10.  units_type="Viscosity" elif unit1 == 'centipoise':  x = x/1000.  units_type="Viscosity" elif unit1 == 'lbfs/sq-ft':  x = x/0.02089  units_type="Viscosity"# Strain elif unit1 == 'm/m':  x = x  units_type="Strain" elif unit1 == 'mm/m':  x = x/1e3  units_type="Strain" elif unit1 == 'ym/m':  x = x/1e6  units_type="Strain" elif unit1 == 'nm/m':  x = x/1e9  units_type="Strain" elif unit1 == '#':  x = x/1e2  units_type="Strain" elif unit1 == 'o/oo':  x = x/1e3  units_type="Strain" elif unit1 == 'in/in':  x = x  units_type="Strain" elif unit1 == 'mill/in':  x = x/1e3  units_type="Strain"# Metric Prefixes elif unit1 == 'Yotta':  x = x*1e24  units_type="Metric_Prefix" elif unit1 == 'Zetta':  x = x*1e21  units_type="Metric_Prefix" elif unit1 == 'Exa':  x = x*1e18  units_type="Metric_Prefix" elif unit1 == 'Peta':  x = x*1e15  units_type="Metric_Prefix" elif unit1 == 'Tera':  x = x*1e12  units_type="Metric_Prefix" elif unit1 == 'Giga':  x = x*1e9  units_type="Metric_Prefix" elif unit1 == 'Mega':  x = x*1e6  units_type="Metric_Prefix" elif unit1 == 'Myria':  x = x*1e5  units_type="Metric_Prefix" elif unit1 == 'kilo':  x = x*1e3  units_type="Metric_Prefix" elif unit1 == 'hecto':  x = x*1e2  units_type="Metric_Prefix" elif unit1 == '1':  x = x  units_type="Metric_Prefix" elif unit1 == 'deci':  x = x*1e-1  units_type="Metric_Prefix" elif unit1 == 'centi':  x = x*1e-2  units_type="Metric_Prefix" elif unit1 == 'milli':  x = x*1e-3  units_type="Metric_Prefix" elif unit1 == 'micro':  x = x*1e-6  units_type="Metric_Prefix" elif unit1 == 'nano':  x = x*1e-9  units_type="Metric_Prefix" elif unit1 == 'pico':  x = x*1e-12  units_type="Metric_Prefix" elif unit1 == 'femto':  x = x*1e-15  units_type="Metric_Prefix" elif unit1 == 'atto':  x = x*1e-18  units_type="Metric_Prefix" elif unit1 == 'zepto':  x = x*1e-21  units_type="Metric_Prefix" elif unit1 == 'yocto':  x = x*1e-24  units_type="Metric_Prefix" else:    err=1  raise ValueError('Error - Unsupported units1')# ---------------------------------------------------------- if err != 1:  # Length  if units_type=="Length":    if unit2 == 'km':      x = x/1000.      elif unit2 == 'm':      x = x    elif unit2 == 'dm':      x = x*10    elif unit2 == 'cm':      x = x*100    elif unit2 == 'mm':      x = x*1000    elif unit2 == 'ym':      x = x*1e6    elif unit2 == 'nm':      x = x*1e9    elif unit2 == 'mile':      x = x/1609.344    elif unit2 == 'yard':      x = x/0.9144    elif unit2 == 'ft':      x = x/0.3048      elif unit2 == 'in':      x = x/0.0254    elif unit2 == 'mill':      x = x/25.4e-6    elif unit2 == 'Angstrom':      x = x*1e10    elif unit2 == 'light-year':      x = x/9.46075309081898e15    else:      raise ValueError('Error - Unsupported units2')   # Time  elif units_type=="Time":    if unit2 == 'yr':      x = x/(60.*60.*24.*365.)      elif unit2 == 'mth':      x = x/(60.*60.*24.*30.)    elif unit2 == 'wk':      x = x/(60.*60.*24.*7.)    elif unit2 == 'day':      x = x/(60.*60.*24.)    elif unit2 == 'hr':      x = x/(60.*60.)    elif unit2 == 'min':      x = x/60.    elif unit2 == 's':      x = x    elif unit2 == 'ms':      x = x*1000    elif unit2 == 'ys':      x = x*1e6    elif unit2 == 'ns':      x = x*1e9    else:      raise ValueError('Error - Unsupported units2')  # Mass  elif units_type=="Mass":     if unit2 == 't':      x = x/1000.    elif unit2 == 'tUS':      x = x/907.18474    elif unit2 == 'tUK':      x = x/1016.0469088    elif unit2 == 'kg':      x = x      elif unit2 == 'g':      x = x*1000    elif unit2 == 'mg':      x = x*1e6    elif unit2 == 'yg':      x = x*1e9    elif unit2 == 'ng':      x = x*1e12    elif unit2 == 'lbs':      x = x/0.4535924    elif unit2 == 'oz':      x = x/0.03110348    else:      raise ValueError('Error - Unsupported units2')# Force  elif units_type=="Force":     if unit2 == 'MN':      x = x/1e6      elif unit2 == 'kN':      x = x/1000.      elif unit2 == 'N':      x = x    elif unit2 == 'dyne':      x = x*1e5    elif unit2 == 'lbf':      x = x/4.44822    elif unit2 == 'kip':      x = x/4448.222    else:      raise ValueError('Error - Unsupported units2')    # Pressure, Stress  elif units_type=="Pressure":     if unit2 == 'GPa':      x = x/10^9      elif unit2 == 'MPa':      x = x/10^6      elif unit2 == 'N/mm^2':      x = x/10^6      elif unit2 == 'kPa':      x = x/1000.    elif unit2 == 'hPa':      x = x/100.      elif unit2 == 'Pa':      x = x    elif unit2 == 'bar':      x = x/1e5    elif unit2 == 'mbar':      x = x/100.    elif unit2 == 'dyne/cm^2':      x = x*10    elif unit2 == 'atm':      x = x/1.01325e5    elif unit2 == 'ksi':      x = x/6894757    elif unit2 == 'psi':      x = x/6894.757    elif unit2 == 'mmHg':      x = x/133.322    elif unit2 == 'mmH2O':      x = x/9.80665    else:      raise ValueError('Error - Unsupported units2')    # Temperature  elif units_type=="Temperature":    if unit2 == 'degK':      x = x    elif unit2 == 'degC':      x = x - 273.15    elif unit2 == 'degF':      x = 9/5*(x-273.15) + 32    elif unit2 == 'degR':      x = 9/5*(x-273.15) + 491.67    else:      raise ValueError('Error - Unsupported units2')# Work, Energy, Torque  elif units_type=="Energy":    if unit2 == 'GJ':      x = x/10^9    elif unit2 == 'MJ':      x = x/10^6    elif unit2 == 'kJ':      x = x/1000.    elif unit2 == 'J':      x = x    elif unit2 == 'mJ':      x = x*1000    elif unit2 == 'Nm':      x = x    elif unit2 == 'Ncm':      x = x*100    elif unit2 == 'Nmm':      x = x*1000    elif unit2 == 'lb-ft':      x = x/1.355818    elif unit2 == 'lb-in':      x = x/0.112984833    elif unit2 == 'oz-in':      x = x/0.007061552    elif unit2 == 'Btu':      x = x/1055.056    elif unit2 == 'kWh':      x = x/3.6e6    elif unit2 == 'Wh':      x = x/3600.    elif unit2 == 'Ws':      x = x    elif unit2 == 'cal':      x = x/4.1868    elif unit2 == 'kcal':      x = x/4186.8    elif unit2 == 'eV':      x = x/1.60218e-19    else:      raise ValueError('Error - Unsupported units2')    # Power  elif units_type=="Power":    if unit2 == 'GW':      x = x/1e9    elif unit2 == 'MW':      x = x/1e6    elif unit2 == 'kW':      x = x/1000.    elif unit2 == 'W':      x = x    elif unit2 == 'mW':      x = x*1000    elif unit2 == 'hp':      x = x/745.6999    elif unit2 == 'Btu/h':      x = x/0.2930711    elif unit2 == 'Btu/s':      x = x/1055.056    elif unit2 == 'kcal/h':      x = x/1.163    elif unit2 == 'J/h':      x = x*3600    else:      raise ValueError('Error - Unsupported units2')# Velocity  elif units_type=="Velocity":    if unit2 == 'km/h':      x = x/(1000./3600.)    elif unit2 == 'km/s':      x = x/1000.    elif unit2 == 'm/s':      x = x    elif unit2 == 'cm/s':      x = x*100.    elif unit2 == 'mm/s':      x = x*1000.    elif unit2 == 'm/min':      x = x*60.    elif unit2 == 'mm/min':      x = x*60000.    elif unit2 == 'mph':      x = x/(1609.344/3600.)    elif unit2 == 'mps':      x = x/1609.344    elif unit2 == 'ft/s':      x = x/0.3048    elif unit2 == 'in/s':      x = x/0.0254    elif unit2 == 'ft/min':      x = x/(0.3048*60.)    elif unit2 == 'in/min':      x = x/(0.0254*60.)    elif unit2 == 'Mach':      x = x/331.5    elif unit2 == 'knots':      x = x/0.514444    else:      raise ValueError('Error - Unsupported units2')  # Acceleration  elif units_type=="Aceleration":    if unit2 == 'm/s^2':      x = x    elif unit2 == 'cm/s^2':      x = x*100    elif unit2 == 'mm/s^2':      x = x*1000    elif unit2 == 'ft/s^2':      x = x/0.3048    elif unit2 == 'in/s^2':      x = x/0.0254    elif unit2 == 'G':     x = x/9.81    else:      raise ValueError('Error - Unsupported units2')  # Area  elif units_type=="Area":    if unit2 == 'km^2':      x = x/1e6    elif unit2 == 'm^2':      x = x    elif unit2 == 'cm^2':      x = x*10^4    elif unit2 == 'mm^2':      x = x*10^6    elif unit2 == 'ym^2':      x = x*10^12    elif unit2 == 'sq-mile':      x = x/1609.344^2    elif unit2 == 'sq-yd':      x = x/0.83612736    elif unit2 == 'sq-ft':      x = x/0.3048^2    elif unit2 == 'sq-in':      x = x/0.0254^2    elif unit2 == 'acres':      x = x/4046.8564224    elif unit2 == 'ha':      x = x/1e4    elif unit2 == 'ar':      x = x/100.    else:      raise ValueError('Error - Unsupported units2')# Volume  elif units_type=="Volume":    if unit2 == 'km^3':      x = x/10^9    elif unit2 == 'm^3':      x = x    elif unit2 == 'cm^3':      x = x*10^6    elif unit2 == 'mm^3':      x = x*10^9    elif unit2 == 'ym^3':      x = x*10^18    elif unit2 == 'cu-mile':      x = x/1609.344^3    elif unit2 == 'cu-ft':      x = x/0.3048^3    elif unit2 == 'cu-yd':      x = x/0.764554857984    elif unit2 == 'cu-in':      x = x/0.0254^3    elif unit2 == 'l':      x = x*1000    elif unit2 == 'cl':      x = x*1e6    elif unit2 == 'ml':      x = x*10^9    elif unit2 == 'galUS':      x = x/3.785412e-3    elif unit2 == 'galUK':      x = x/4.54609e-3     elif unit2 == 'pint':      x = x/4.73176473e-4    elif unit2 == 'quart':      x = x/9.46352946e-4    elif unit2 == 'fl-oz':      x = x/2.95735295625e-5    else:      raise ValueError('Error - Unsupported units2')# Density  elif units_type=="Density":    if unit2 == 't/m^3':      x = x/1000.    elif unit2 == 'kg/m^3':      x = x    elif unit2 == 'g/cm^3':      x = x/1000.    elif unit2 == 'g/mm^3':      x = x/1e6    elif unit2 == 'kg/l':      x = x/1000.    elif unit2 == 'lbs/ft^3':      x = x/(0.4535924/0.3048^3)    elif unit2 == 'lbs/in^3':      x = x/(0.4535924/0.0254^3)    elif unit2 == 'lbs/galUS':      x = x/119.826427    elif unit2 == 'lbs/galUK':      x = x/99.776373    else:      raise ValueError('Error - Unsupported units2')# Mass Moment of Inertia  elif units_type=="Momentum":    if unit2 == 'kg*m^2':      x = x    elif unit2 == 'kg*cm^2':      x = x*1e4    elif unit2 == 'kg*mm^2':      x = x*1e6    elif unit2 == 'g*m^2':      x = x*1000    elif unit2 == 'g*cm^2':      x = x*1e7    elif unit2 == 'g*mm^2':      x = x*1e9    elif unit2 == 'lb*ft^2':      x = x/0.04214011    elif unit2 == 'lb*in^2':      x = x/0.2926397e-3    else:      raise ValueError('Error - Unsupported units2')# Areal Moment of Inertia  elif units_type=="Area_Momentum":    if unit2 == 'm^4':      x = x    elif unit2 == 'cm^4':      x = x*1e8    elif unit2 == 'mm^4':      x = x*1e12    elif unit2 == 'ft^4':      x = x*(0.3048^4)    elif unit2 == 'in^4':      x = x*(0.0254^4)    else:      raise ValueError('Error - Unsupported units2')# Frequency / Angular Velocity  elif units_type=="Frecuency":    if unit2 == 'GHz':      x = x/1e9    elif unit2 == 'MHz':      x = x/1e6    elif unit2 == 'kHz':      x = x/1e3    elif unit2 == 'Hz':      x = x    elif unit2 == '1/min':      x = x*60    elif unit2 == '1/h':      x = x*3600    elif unit2 == 'rad/s':      x = x*(2*pi)    elif unit2 == 'deg/s':      x = x*360    elif unit2 == 'rpm':      x = x*60    else:      raise ValueError('Error - Unsupported units2')# Angle  elif units_type=="Angle":    if unit2 == 'rad':      x = x    elif unit2 == 'deg':      x = x*(180/pi)    elif unit2 == 'rev':      x = x/(2*pi)    else:      raise ValueError('Error - Unsupported units2')# Stress Intensity Factor  elif units_type=="Stress_Intensity":    if unit2 == 'MPa*m^1/2':      x = x    elif unit2 == 'MPa*mm^1/2':      x = x*sqrt(1000)    elif unit2 == 'MPa*in^1/2':      x = x/6.894757/sqrt(0.0254)    else:      raise ValueError('Error - Unsupported units2')   # Fuel Consumption  elif units_type=="Fuel":    if unit2 == 'l/100km':      x = x    elif unit2 == 'miles/galUS':      x = 235.214596754951/x    else:      raise ValueError('Error - Unsupported units2')# Viscosity  elif units_type=="Viscosity":    if unit2 == 'Ns/m^2':      x = x    elif unit2 == 'poise':      x = x*10    elif unit2 == 'centipoise':      x = x*1000    elif unit2 == 'lbfs/sq-ft':      x = x*0.02089    else:      raise ValueError('Error - Unsupported units2')# Strain  elif units_type=="Strain":    if unit2 == 'm/m':      x = x    elif unit2 == 'mm/m':      x = x*1e3    elif unit2 == 'ym/m':      x = x*1e6    elif unit2 == 'nm/m':      x = x*1e9    elif unit2 == '#':      x = x*1e2    elif unit2 == 'o/oo':      x = x*1e3    elif unit2 == 'in/in':      x = x    elif unit2 == 'mill/in':      x = x*1e3    else:      raise ValueError('Error - Unsupported units2')         # Metric Prefixes  elif units_type=="Metric_Prefix":    if unit2 == 'Yotta':      x = x*1e-24    elif unit2 == 'Zetta':      x = x*1e-21    elif unit2 == 'Exa':      x = x*1e-18    elif unit2 == 'Peta':      x = x*1e-15    elif unit2 == 'Tera':      x = x*1e-12    elif unit2 == 'Giga':      x = x*1e-9    elif unit2 == 'Mega':      x = x*1e-6    elif unit2 == 'Myria':      x = x*1e-5    elif unit2 == 'kilo':      x = x*1e-3    elif unit2 == 'hecto':      x = x*1e-2    elif unit2 == '1':      x = x    elif unit2 == 'deci':      x = x*1e1    elif unit2 == 'centi':      x = x*1e2    elif unit2 == 'milli':      x = x*1e3    elif unit2 == 'micro':      x = x*1e6    elif unit2 == 'nano':      x = x*1e9    elif unit2 == 'pico':      x = x*1e12    elif unit2 == 'femto':      x = x*1e15    elif unit2 == 'atto':      x = x*1e18    elif unit2 == 'zepto':      x = x*1e21    elif unit2 == 'yocto':      x = x*1e24    else:      raise ValueError('Error - Unsupported units2')  else:    raise ValueError('Error - Unsupported conversion')       #raise ValueError('Error - Unsupported ',units2) return x